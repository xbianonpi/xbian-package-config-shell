#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

# The arguments this module accepts
ARGUMENTS=(list progress updatedb install installtest);

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

source $BASEPATH/modules/updates/functions
if [ $GUIMODE -eq 1 ]; then
	source $BASEPATH/modules/updates/dialogs
fi
source $BASEPATH/functions/packages

#|------------------------------------|
#|           Main program             |
#|------------------------------------|

# Executes the GUI version of this module
function showGUIFn() {
	if [ $REMOTEPKGDBUPDATED -eq 0 ]; then
		showDownloadPackageListDlg;
		updateAptMirrorsFn;
		if [ $? -eq 1 ]; then
			showFailedToRetrieveAptMirrosDlg;
		else
#			downloadPackageListFn;
			REMOTEPKGDBUPDATED=0
		fi;
	fi
	if [ "$LOCALPKGDBUPDATED" -eq 0 ]; then
		if [ "$REMOTEPKGDBUPDATED" -eq 1 ]; then
			localPackageDBOutdatedFn;
			if [ $? -eq 1 ]; then
				showUpdateAptDBDlg;
				updateAptFn;
				if [ $? -eq 1 ]; then
					LOCALPKGDBUPDATED=1;
				else
					showUpdateAptDBFailedDlg;
				fi
			fi
		fi
	fi
	if [ "$APTUPDATELISTUPDATED" -eq 0 ] || [ ! -f "/tmp/aptupdates" ]; then
		showRetrievingUpdateListDlg;
		retrieveUpdateListFn;
		APTUPDATELISTUPDATED=1;
	fi
	getAllUpdatesLisFn
	getAllPackagesLisFn
	SYSTEMUPDATE=0;

	if [ ${#UPDATES[@]} -ge 1 ]; then

		showSystemUpdateConfirmDlg;
		if [ $? -eq 0 ]; then
			showUpgradeSystemDlg;
			updateSystemFn 1 "${UPDATES[*]}";
			STATUS=$?;
			LOG=0;
			if [ $STATUS -eq 1 ]; then
				showUpdateAlreadyInstalledDlg;
			elif [ $STATUS -eq 2 ]; then
				showUpdateVersionNotExistDlg;
			elif [ $STATUS -eq 3 ]; then
				showUpdateNotExistsDlg;
			elif [ $STATUS -eq 4 ]; then
				showUpdateDowngradeDlg;
			elif [ $STATUS -ge 5 ]; then
				showUpdateAdvErrorDlg;
			elif [ $STATUS -eq 0 ]; then
				updateSystemFn 0 "${UPDATES[*]}";
				if [ $? -eq 0 ]; then
					if [ -f "/tmp/aptstatus" ] || [ -f "/home/xbian/update" ]; then
						showAskForLogDlg;
						if [ $? -eq 0 ]; then
							if [ -f "/home/xbian/xbian-update.log" ]; then
								showSystemUpdateLogDlg;
							elif [ -f "/tmp/aptstatus" ]; then
								showUpdateLogDlg;
							fi
						fi
					fi
					[ -e /tmp/aptstatus ] && rm /tmp/aptstatus
					LOG=1;
					showSystemUpdateRebootDlg;
					sleep 10; sudo reboot;
				else
					showUpdateAdvErrorDlg;
				fi
			fi
			if [ $LOG -eq 0 ]; then
				showAskForLogDlg;
				if [ $? -eq 0 ]; then
					showUpdateLogDlg;
				fi
			fi
			SYSTEMUPDATE=1;
		fi
	fi
	if [ $SYSTEMUPDATE -eq 0 ]; then
		if [ ${#PACKAGES[@]} -eq 0 ]; then
			showUpToDateDlg;
			[ -e /tmp/aptstatus ] && rm /tmp/aptstatus
		else
			showAvailableUpdatesDlg "${PACKAGES[*]}";
			if [ $? -eq 0 ]; then
				IFS=" ";
				SELECTION=($RETURN);
				showInstallUpdatesDlg;
				updatePackagesFn 1 "${SELECTION[*]}";
				STATUS=$?;
				if [ $STATUS -eq 1 ]; then
					showUpdateAlreadyInstalledDlg;
				elif [ $STATUS -eq 2 ]; then
					showUpdateVersionNotExistDlg;
				elif [ $STATUS -eq 3 ]; then
					showUpdateNotExistsDlg;
				elif [ $STATUS -eq 4 ]; then
					showUpdateDowngradeDlg;
				elif [ $STATUS -ge 5 ]; then
					showUpdateAdvErrorDlg;
				elif [ $STATUS -eq 0 ]; then
					updatePackagesFn 0 "${SELECTION[*]}";
				fi
				if [ -f "/tmp/aptstatus" ]; then
					showAskForLogDlg;
					if [ $? -eq 0 ]; then
						showUpdateLogDlg;
					fi
				fi
				[ -e /tmp/aptstatus ] && rm /tmp/aptstatus
                        
				APTUPDATELISTUPDATED=0
				showGUIFn; 
			fi
		fi
	fi
	APTUPDATELISTUPDATED=0
}

# Executes the command line version of this module
#  $1 Argument [String]
# list | installtest | install
#  $2 Type [String] packages | upgrades
# install | installtest
#  $@ Index of upgradeable packages
# Returns
# list | installtest | install
#  -  1: Success
#  -  0: Failed
#  - -1: Wrong number of arguments
#  - -2: No updates available
#  - -3: You need to run an updatedb first
#  *list
#  -  [index];[package name];[install version];[available version]
#  *installtest | install - (Simulates an) apt-get install
#  -  1: Package can be installed without problems
#  -  2: This package is already installed
#  -  3: Package not found in apt repository
#  -  4: A newer version of this package is already installed
#  -  5: There is a size mismatch for the remote package
#  -  6: The package itself got an internal error
#  *progress
#  -  1: Apt is still running
#  -  0: Apt is not running
#  *updatedb - Updates local and remote apt library (when needed)
function showCMDFn() {
	case $1 in
		list)
			if [ $# -eq 2 ]; then
				if [ -f "$BASEPATH/config/pkglist" ] && [ -f "$BASEPATH/config/aptmirror" ]; then
                                        limit=15; i=1
					[ -z "$(find /tmp/aptupdates -cmin -60 2>/dev/null)" ] && retrieveUpdateListFn;
					if [ "$2" == "packages" ]; then
						getAllPackagesLisFn;
						if [ ${#PACKAGES[@]} -ge 1 ]; then
							for KEY in ${!PACKAGES[@]}; do
								test $i -gt $limit && break
                                                                echo $(($KEY+1))";"${PACKAGES[$KEY]};
                                                                i=$(($i+1))
							done
						else
							echo -2;
						fi
					elif [ "$2" == "upgrades" ]; then
						getAllUpdatesLisFn;
						if [ ${#UPDATES[@]} -ge 1 ]; then
							for KEY in ${!UPDATES[@]}; do
								test $i -gt $limit && break
                                                                echo $(($KEY+1))";"${UPDATES[$KEY]};
							        i=$(($i+1))
                                                        done
						else
							echo -2;
						fi
					else
						echo -1;
					fi
				else
					echo -3;
				fi
			else
				echo -1;
			fi
		;;
		installtest)
			if [ $# -ge 3 ]; then
				if [ -f "$BASEPATH/config/pkglist" ] && [ -f "$BASEPATH/config/aptmirror" ]; then
					shift;
					if [ "$1" == "packages" ]; then
						shift;
						getAllPackagesLisFn;
						SELECTION=($@);
						updatePackagesFn 1 "${SELECTION[*]}";
						RETURN=$?;
						case $RETURN in
							0)
								echo 1;
							;;
							*)
								echo $(($RETURN+1));
							;;
						esac
					elif [ "$1" == "upgrades" ]; then
						shift;
						getAllUpdatesLisFn;
						SELECTION=($@);
						updateSystemFn 1 "${SELECTION[*]}";
						RETURN=$?;
						case $RETURN in
							0)
								echo 1;
							;;
							*)
								echo $(($RETURN+1));
							;;
						esac
					else
						echo -1;
					fi
				else
					echo -3;
				fi
			else
				echo -1;
			fi
		;;
		install)
			if [ $# -ge 3 ]; then
				if [ -f "$BASEPATH/config/pkglist" ] && [ -f "$BASEPATH/config/aptmirror" ]; then
					shift;
					if [ "$1" == "packages" ]; then
						shift;
						getAllPackagesLisFn;
						SELECTION=($@);
						updatePackagesFn 2 "${SELECTION[*]}";
						RETURN=$?;
						case $RETURN in
							0)
                                                                echo 1;
							;;
							*)
								echo $(($RETURN+1));
							;;
						esac
					elif [ "$1" == "upgrades" ]; then
						shift;
						getAllUpdatesLisFn;
						SELECTION=($@);
						updateSystemFn 2 "${SELECTION[*]}";
						RETURN=$?;
						case $RETURN in
							0)
								echo 1;
							;;
							*)
								echo $(($RETURN+1));
							;;
						esac
					else
						echo -1;
					fi
				else
					echo -3;
				fi
			else
				echo -1;
			fi
		;;		
		progress)
			if pgrep apt-get >/dev/null; then
				echo 1;
			else
				echo 0;
			fi
		;;
		updatedb)
			STATUS=0;
			updateAptMirrorsFn;
			if [ $? -eq 0 ]; then
						updateAptFn
                                                retrieveUpdateListFn
                                                grep -q ^Inst /tmp/aptupdates 
						if [ $? -eq 0 ]; then
							STATUS=1;
						else
							STATUS=0;
						fi
			else
				STATUS=0;
			fi
			echo $STATUS;
		;;
	esac
}
